using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using CarSaloonEvidence.CarModel;
using CarSaloonEvidence.Controllers;
using CarSaloonEvidence.Dtos;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Moq;
using Repository.Abstraction;
using Xunit;

namespace CarSaloonEvidence.UnitTests.Controllers
{
    public class CarControllerTests
    {
        private readonly Mock<ICarRepository> _repositoryMock = new();
        private readonly CarController _carController;

        public CarControllerTests()
        {
            // Arrange
            _carController = new CarController(_repositoryMock.Object);
        }

        [Fact]
        public void CarController_CreateInstance_InstanceCreated()
        {
            // Assert
            _carController.Should().NotBeNull();
        }

        [Fact]
        public void CarController_GetAllCars_AllCarsReturned()
        {
            // Arrange (Setup the mock and prepare all necessary objects)
            var car = new Car { BrandName = "Skoda", CarType = CarType.Sedan };
            IEnumerable<Car> cars = new List<Car> { car };
            _repositoryMock.Setup(r => r.GetCars()).Returns(() => cars);

            // Act
            OkObjectResult response = _carController.GetAllCars() as OkObjectResult;

            // Assert
            response.Should().NotBeNull();
            _repositoryMock.Verify(r => r.GetCars(), Times.Once);
            response.StatusCode.Should().BeGreaterOrEqualTo(200);
            ((List<Car>)response.Value).Should().NotBeEmpty();
            ((List<Car>)response.Value).First().Should().BeEquivalentTo(car);
        }

        [Fact]
        public void CarController_GetAllManufacturers_AllManufacturersReturned()
        {
            OkObjectResult response = _carController.GetAllManufacturers() as OkObjectResult;

            response.Should().NotBeNull();
            response.StatusCode.Should().BeGreaterOrEqualTo(200);

            // Is it the response object a collection type?
            (response.Value).Should().BeAssignableTo<IEnumerable<Manufacturer>>();

            // How many elements does it initially have?
            //((Manufacturer[])response.Value).Length.Should().Be(0);

            // In next session:
            // Trippe AAA principle.
            // What's wrong with current implementation of my CarController?
            // How it can be improved?
            // Why are static dependencies bad? => Static are TOXIC! Don't use it until you have a really good reason for it!
            // Do I have a possibility affect the returned manufacturers with current implementation? -> Yes/No
            // Try verify if the method was called on a mock.
            // Try to identify the business logic in the controller and focus on it in our tests (where clauses).
            // Bad practices in unit tests: Law of Demeter. (https://en.wikipedia.org/wiki/Law_of_Demeter)
        }

        [Fact]
        public void CarController_AddCar_CarAdded()
        {
            // Arrange (Setup the mock and prepare all necessary objects)
            var carDto = new CarDto
            {
                BrandName = "Skoda",
                CarType = CarType.Sedan,
                ModelName = "Felicia",
                ReleasedIn = new DateTime(1995, 1, 1),
                ManufacturerName = "Skoda"
            };

            var addedCar = new Car
            {
                Manufacturer = Manufacturer.GetManufacturers().Single(m => m.Name == "Skoda"),
                ModelName = carDto.ModelName,
                ReleasedIn = carDto.ReleasedIn,
                BrandName = carDto.BrandName,
                CarType = carDto.CarType,

                // Generated by the DB.
                Id = Guid.NewGuid()
            };

            IEnumerable<Manufacturer> manufacturers = Manufacturer.GetManufacturers();
            _repositoryMock.Setup(r => r.GetManufacturers()).Returns(() => manufacturers);
            _repositoryMock.Setup(r => r.AddCar(It.IsAny<Car>())).Returns(addedCar);

            // Act
            OkObjectResult response = _carController.AddCar(carDto) as OkObjectResult;

            // Assert
            response.Should().NotBeNull();
            _repositoryMock.Verify(r => r.GetManufacturers(), Times.Once);
            _repositoryMock.Verify(r => r.AddCar(It.IsAny<Car>()), Times.Once);
            response.StatusCode.Should().BeGreaterOrEqualTo(200);
            ((CarDto)response.Value).Should().BeEquivalentTo(carDto);
        }

        [Fact]
        public void CarController_AddCarWithNewManufacturer_CarAdded()
        {
            // Arrange (Setup the mock and prepare all necessary objects)
            var carDto = new CarDto
            {
                BrandName = "Porsche",
                CarType = CarType.Sedan,
                ModelName = "Carrera",
                ReleasedIn = new DateTime(1995, 1, 1),
                ManufacturerName = "Porsche"
            };

            // Setup the domain entity object.
            var addedCar = new Car
            {
                Manufacturer = new Manufacturer
                {
                    Name = "Porsche",
                    Id = 1002
                },
                ModelName = carDto.ModelName,
                ReleasedIn = carDto.ReleasedIn,
                BrandName = carDto.BrandName,
                CarType = carDto.CarType,

                // Generated by the DB.
                Id = Guid.NewGuid()
            };

            IEnumerable<Manufacturer> manufacturers = Manufacturer.GetManufacturers();
            _repositoryMock.Setup(r => r.GetManufacturers()).Returns(() => manufacturers);

            Manufacturer createdManufacturer = null;
            _repositoryMock.Setup(r => r.AddCar(It.IsAny<Car>()))
                .Returns(addedCar)
                .Callback(new Action<Car>(c =>
            {
                createdManufacturer = c.Manufacturer;
            }));

            // Act
            OkObjectResult response = _carController.AddCar(carDto) as OkObjectResult;

            // Assert
            response.Should().NotBeNull();
            _repositoryMock.Verify(r => r.GetManufacturers(), Times.Once);
            _repositoryMock.Verify(r => r.AddCar(It.IsAny<Car>()), Times.Once);
            response.StatusCode.Should().BeGreaterOrEqualTo(200);
            ((CarDto)response.Value).Should().BeEquivalentTo(carDto);
            createdManufacturer.Name.Should().BeEquivalentTo(carDto.ManufacturerName);
        }
    }
}
